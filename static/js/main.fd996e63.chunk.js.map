{"version":3,"sources":["components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/PageNav.tsx","components/ErrorNotification.tsx","api.ts","App.tsx","index.tsx"],"names":["Loader","className","PersonLink","selectedParent","setSelectedSlug","parentName","to","slug","classNames","sex","onClick","PeopleTable","people","isPeopleLoading","useState","selectedSlug","map","person","name","born","died","motherName","fatherName","selectedFather","find","el","selectedMother","PageNav","text","isActive","ErrorNotification","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","App","setPeople","setIsPeopleLoading","isShownError","setIsShowError","useEffect","arr","catch","role","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fd996e63.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  selectedParent?: Person,\n  setSelectedSlug: (arg: string) => void,\n  parentName: string | null,\n};\n\nexport const PersonLink: FC<Props> = ({\n  selectedParent, setSelectedSlug, parentName,\n}) => {\n  return (\n    <Link\n      to={`/people/${selectedParent?.slug || ''}`}\n      className={classNames(\n        { 'has-text-danger': selectedParent?.sex === 'f' },\n      )}\n      onClick={() => {\n        return selectedParent?.slug\n          ? setSelectedSlug(selectedParent.slug)\n          : setSelectedSlug('');\n      }}\n    >\n      {parentName || '-'}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { FC, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\nimport { Loader } from './Loader/Loader';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[],\n  isPeopleLoading: boolean,\n};\n\nexport const PeopleTable: FC<Props> = ({ people, isPeopleLoading }) => {\n  const [selectedSlug, setSelectedSlug] = useState('');\n\n  return (\n    <>\n      <table\n        data-cy=\"peopleTable\"\n        className=\"\n          table\n          is-striped\n          is-hoverable\n          is-narrow\n          is-fullwidth\n        \"\n      >\n        {!isPeopleLoading\n          ? <Loader />\n          : (\n            <>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n              <tbody>\n                {people.map((person: Person) => {\n                  const {\n                    name, sex, born, died, motherName, fatherName, slug,\n                  } = person;\n\n                  const selectedFather: Person | undefined = people.find(el => {\n                    return el.name === fatherName;\n                  });\n\n                  const selectedMother: Person | undefined = people.find(el => {\n                    return el.name === motherName;\n                  });\n\n                  return (\n                    <tr\n                      key={slug}\n                      data-cy=\"person\"\n                      className={classNames(\n                        { 'has-background-warning': selectedSlug === slug },\n                      )}\n                    >\n                      <td>\n                        <Link\n                          to={`/people/${slug}`}\n                          className={classNames(\n                            { 'has-text-danger': sex === 'f' },\n                          )}\n                          onClick={() => setSelectedSlug(slug)}\n                        >\n                          {name}\n                        </Link>\n                      </td>\n                      <td>{sex}</td>\n                      <td>{born}</td>\n                      <td>{died}</td>\n                      <td>\n                        <PersonLink\n                          selectedParent={selectedMother}\n                          setSelectedSlug={setSelectedSlug}\n                          parentName={motherName}\n                        />\n                      </td>\n                      <td>\n                        <PersonLink\n                          selectedParent={selectedFather}\n                          setSelectedSlug={setSelectedSlug}\n                          parentName={fatherName}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </>\n          )}\n      </table>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const PageNav: FC<Props> = ({ to, text }) => {\n  return (\n    <NavLink\n      className={({ isActive }) => {\n        return classNames(\n          'navbar-item',\n          { 'has-background-grey-lighter': isActive },\n        );\n      }}\n      to={to}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","export const ErrorNotification = () => {\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          Something went wrong\n        </p>\n\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      </div>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import {\n  Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { PeopleTable } from './components/PeopleTable';\nimport { PageNav } from './components/PageNav';\nimport { ErrorNotification } from './components/ErrorNotification';\n\nimport './App.scss';\nimport { Person } from './types/Person';\nimport { getPeople } from './api';\n\nexport const App = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isPeopleLoading, setIsPeopleLoading] = useState(false);\n  const [isShownError, setIsShowError] = useState(false);\n\n  useEffect(() => {\n    getPeople()\n      .then((arr: Person[]) => {\n        setPeople(arr);\n        setIsPeopleLoading(true);\n      })\n      .catch(() => {\n        setIsShowError(true);\n        setIsPeopleLoading(true);\n      });\n  }, []);\n\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <PageNav to=\"/\" text=\"Home\" />\n            <PageNav to=\"people\" text=\"People\" />\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={(\n                <h1 className=\"title\">Home Page</h1>\n              )}\n            />\n\n            <Route\n              path=\"/people\"\n              element={(\n                <>\n                  <h1 className=\"title\">People Page</h1>\n                  <PeopleTable\n                    people={people}\n                    isPeopleLoading={isPeopleLoading}\n                  />\n                </>\n              )}\n            >\n              <Route index />\n              <Route path=\":userId\" />\n            </Route>\n\n            <Route\n              path=\"*\"\n              element={(\n                <h1 className=\"title\">Page not found</h1>\n              )}\n            />\n            <Route\n              path=\"home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n          </Routes>\n\n          {isShownError && <ErrorNotification />}\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}